// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  USER
}

enum OrderEventStatus {
  PENDING
  ACCEPTED
  OUT_FOR_DELIVERY
  DELIVERED
  CANCELLED
}

model User {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name                   String
  email                  String @unique
  password               String
  role                   Role   @default(USER)
  defaultShippingAddress Int?
  defaultBillingAddress  Int?

  Address  Address[]
  CartItem CartItem[]
  Order    Order[]

  @@map("user")
}

model Address {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  lineOne String
  lineTwo String?
  city    String
  country String
  pincode String

  userId Int
  user   User @relation(fields: [userId], references: [id])

  @@map("address")
}

model Product {
  id          Int      @id @default(autoincrement())
  name        String
  description String   @db.Text
  price       Decimal
  tags        String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  CartItem     CartItem[]
  OrderProduct OrderProduct[]

  @@fulltext([name, description, tags])
  @@map("product")
}

model CartItem {
  id Int @id @default(autoincrement())

  userId Int
  user   User @relation(fields: [userId], references: [id])

  productId Int
  product   Product @relation(fields: [productId], references: [id])

  quantity Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("cart_item")
}

model Order {
  id Int @id @default(autoincrement())

  userId Int
  user   User @relation(fields: [userId], references: [id])

  netAmount Decimal
  address   String
  status    OrderEventStatus @default(PENDING)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Products OrderProduct[]
  events   OrderEvent[]

  @@map("order")
}

model OrderProduct {
  id Int @id @default(autoincrement())

  orderId Int
  order   Order @relation(fields: [orderId], references: [id])

  productId Int
  product   Product @relation(fields: [productId], references: [id])

  quantity Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("order_product")
}

model OrderEvent {
  id Int @id @default(autoincrement())

  orderId Int
  order   Order @relation(fields: [orderId], references: [id])

  status OrderEventStatus @default(PENDING)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("order_event")
}
